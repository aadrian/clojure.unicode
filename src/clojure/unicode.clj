(ns clojure.unicode
  (:require
    clojure.set))

(def ≠ not=)
(def ¬ not)
(def ^:macro ∧ #'and)
(def ^:macro ∨ #'or)

(def × *)
(def ÷ /)
(def − -)
(def ≤ <=)
(def ≥ >=)
(def ≡ ==)
(defn ≢ [& args] (¬ (apply == args)))
(def ∞ Double/POSITIVE_INFINITY)
(defn ∑ [xs] (reduce + xs))
(defn ∏ [xs] (reduce * xs))

(def ∋ contains?)
(defn ∌ [A x] (¬ (∋ A x)))
(defn ∈ [x A] (∋ A x))
(defn ∉ [x A] (∌ A x))
(def ∀ every?)
(def ∃ some)
(def ∄ not-any?)
(def ∪ clojure.set/union)
(def ∩ clojure.set/intersection)
(def ⊆ clojure.set/subset?)
(def ⊇ clojure.set/superset?)
(defn ⊈ [A B] (¬ (⊆ A B)))
(defn ⊉ [A B] (¬ (⊇ A B)))
(def ∖ clojure.set/difference)
(def ∅ #{})

(def ^:macro ↠ #'->>)
(def ^:macro → #'->)
(def ^:macro λ #'fn)
(def ∘ comp)
